{
  "/public/v1/submit/create_private_keys": {
    "post": {
      "tags": ["Private Keys"],
      "summary": "Create Private Keys",
      "description": "Create new Private Keys",
      "operationId": "CreatePrivateKeys",
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "organizationId",
                "parameters",
                "timestampMs",
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2"]
                },
                "timestampMs": {
                  "type": "string",
                  "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
                },
                "organizationId": {
                  "type": "string",
                  "description": "Unique identifier for a given Organization."
                },
                "parameters": {
                  "required": ["privateKeys"],
                  "type": "object",
                  "properties": {
                    "privateKeys": {
                      "type": "array",
                      "description": "A list of Private Keys.",
                      "items": {
                        "required": [
                          "addressFormats",
                          "curve",
                          "privateKeyName",
                          "privateKeyTags"
                        ],
                        "type": "object",
                        "properties": {
                          "privateKeyName": {
                            "type": "string",
                            "description": "Human-readable name for a Private Key."
                          },
                          "curve": {
                            "type": "string",
                            "enum": ["CURVE_SECP256K1", "CURVE_ED25519"]
                          },
                          "privateKeyTags": {
                            "type": "array",
                            "description": "A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "addressFormats": {
                            "type": "array",
                            "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
                            "items": {
                              "type": "string",
                              "enum": [
                                "ADDRESS_FORMAT_UNCOMPRESSED",
                                "ADDRESS_FORMAT_COMPRESSED",
                                "ADDRESS_FORMAT_ETHEREUM",
                                "ADDRESS_FORMAT_SOLANA",
                                "ADDRESS_FORMAT_COSMOS",
                                "ADDRESS_FORMAT_TRON",
                                "ADDRESS_FORMAT_SUI",
                                "ADDRESS_FORMAT_APTOS",
                                "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                "ADDRESS_FORMAT_SEI",
                                "ADDRESS_FORMAT_XLM",
                                "ADDRESS_FORMAT_DOGE_MAINNET",
                                "ADDRESS_FORMAT_DOGE_TESTNET",
                                "ADDRESS_FORMAT_TON_V3R2",
                                "ADDRESS_FORMAT_TON_V4R2",
                                "ADDRESS_FORMAT_XRP"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": true
      },
      "responses": {
        "200": {
          "description": "A successful response.",
          "content": {
            "application/json": {
              "schema": {
                "required": ["activity"],
                "type": "object",
                "properties": {
                  "activity": {
                    "required": [
                      "canApprove",
                      "canReject",
                      "createdAt",
                      "fingerprint",
                      "id",
                      "intent",
                      "organizationId",
                      "result",
                      "status",
                      "type",
                      "updatedAt",
                      "votes"
                    ],
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for a given Activity object."
                      },
                      "organizationId": {
                        "type": "string",
                        "description": "Unique identifier for a given Organization."
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "ACTIVITY_STATUS_CREATED",
                          "ACTIVITY_STATUS_PENDING",
                          "ACTIVITY_STATUS_COMPLETED",
                          "ACTIVITY_STATUS_FAILED",
                          "ACTIVITY_STATUS_CONSENSUS_NEEDED",
                          "ACTIVITY_STATUS_REJECTED"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ACTIVITY_TYPE_CREATE_API_KEYS",
                          "ACTIVITY_TYPE_CREATE_USERS",
                          "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS",
                          "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD",
                          "ACTIVITY_TYPE_CREATE_INVITATIONS",
                          "ACTIVITY_TYPE_ACCEPT_INVITATION",
                          "ACTIVITY_TYPE_CREATE_POLICY",
                          "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY",
                          "ACTIVITY_TYPE_DELETE_USERS",
                          "ACTIVITY_TYPE_DELETE_API_KEYS",
                          "ACTIVITY_TYPE_DELETE_INVITATION",
                          "ACTIVITY_TYPE_DELETE_ORGANIZATION",
                          "ACTIVITY_TYPE_DELETE_POLICY",
                          "ACTIVITY_TYPE_CREATE_USER_TAG",
                          "ACTIVITY_TYPE_DELETE_USER_TAGS",
                          "ACTIVITY_TYPE_CREATE_ORGANIZATION",
                          "ACTIVITY_TYPE_SIGN_TRANSACTION",
                          "ACTIVITY_TYPE_APPROVE_ACTIVITY",
                          "ACTIVITY_TYPE_REJECT_ACTIVITY",
                          "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
                          "ACTIVITY_TYPE_CREATE_AUTHENTICATORS",
                          "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
                          "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
                          "ACTIVITY_TYPE_SET_PAYMENT_METHOD",
                          "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER",
                          "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD",
                          "ACTIVITY_TYPE_CREATE_POLICY_V2",
                          "ACTIVITY_TYPE_CREATE_POLICY_V3",
                          "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
                          "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
                          "ACTIVITY_TYPE_UPDATE_USER_TAG",
                          "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
                          "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
                          "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2",
                          "ACTIVITY_TYPE_CREATE_USERS_V2",
                          "ACTIVITY_TYPE_ACCEPT_INVITATION_V2",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2",
                          "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS",
                          "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
                          "ACTIVITY_TYPE_UPDATE_USER",
                          "ACTIVITY_TYPE_UPDATE_POLICY",
                          "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3",
                          "ACTIVITY_TYPE_CREATE_WALLET",
                          "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
                          "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
                          "ACTIVITY_TYPE_RECOVER_USER",
                          "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
                          "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
                          "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
                          "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
                          "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
                          "ACTIVITY_TYPE_EXPORT_WALLET",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4",
                          "ACTIVITY_TYPE_EMAIL_AUTH",
                          "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
                          "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
                          "ACTIVITY_TYPE_IMPORT_WALLET",
                          "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
                          "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
                          "ACTIVITY_TYPE_CREATE_POLICIES",
                          "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
                          "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
                          "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
                          "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5",
                          "ACTIVITY_TYPE_OAUTH",
                          "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
                          "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION",
                          "ACTIVITY_TYPE_EMAIL_AUTH_V2",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6",
                          "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS",
                          "ACTIVITY_TYPE_DELETE_WALLETS",
                          "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2",
                          "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION",
                          "ACTIVITY_TYPE_INIT_OTP_AUTH",
                          "ACTIVITY_TYPE_OTP_AUTH",
                          "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7",
                          "ACTIVITY_TYPE_UPDATE_WALLET"
                        ]
                      },
                      "intent": {
                        "type": "object",
                        "properties": {
                          "createOrganizationIntent": {
                            "required": [
                              "organizationName",
                              "rootAuthenticator",
                              "rootEmail"
                            ],
                            "type": "object",
                            "properties": {
                              "organizationName": {
                                "type": "string",
                                "description": "Human-readable name for an Organization."
                              },
                              "rootEmail": {
                                "type": "string",
                                "description": "The root user's email address."
                              },
                              "rootAuthenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge",
                                  "userId"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given User."
                                  },
                                  "attestation": {
                                    "required": [
                                      "clientExtensionResults",
                                      "id",
                                      "rawId",
                                      "response",
                                      "type"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": ["public-key"]
                                      },
                                      "rawId": {
                                        "type": "string"
                                      },
                                      "authenticatorAttachment": {
                                        "type": "string",
                                        "nullable": true,
                                        "enum": ["cross-platform", "platform"]
                                      },
                                      "response": {
                                        "required": [
                                          "attestationObject",
                                          "clientDataJson"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "clientDataJson": {
                                            "type": "string"
                                          },
                                          "attestationObject": {
                                            "type": "string"
                                          },
                                          "transports": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "AUTHENTICATOR_TRANSPORT_BLE",
                                                "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                "AUTHENTICATOR_TRANSPORT_NFC",
                                                "AUTHENTICATOR_TRANSPORT_USB",
                                                "AUTHENTICATOR_TRANSPORT_HYBRID"
                                              ]
                                            }
                                          },
                                          "authenticatorAttachment": {
                                            "type": "string",
                                            "nullable": true,
                                            "enum": [
                                              "cross-platform",
                                              "platform"
                                            ]
                                          }
                                        }
                                      },
                                      "clientExtensionResults": {
                                        "type": "object",
                                        "properties": {
                                          "appid": {
                                            "type": "boolean"
                                          },
                                          "appidExclude": {
                                            "type": "boolean"
                                          },
                                          "credProps": {
                                            "required": ["rk"],
                                            "type": "object",
                                            "properties": {
                                              "rk": {
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  }
                                }
                              },
                              "rootUserId": {
                                "type": "string",
                                "description": "Unique identifier for the root user object."
                              }
                            }
                          },
                          "createAuthenticatorsIntent": {
                            "required": ["authenticators", "userId"],
                            "type": "object",
                            "properties": {
                              "authenticators": {
                                "type": "array",
                                "description": "A list of Authenticators.",
                                "items": {
                                  "required": [
                                    "attestation",
                                    "authenticatorName",
                                    "challenge",
                                    "userId"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "authenticatorName": {
                                      "type": "string",
                                      "description": "Human-readable name for an Authenticator."
                                    },
                                    "userId": {
                                      "type": "string",
                                      "description": "Unique identifier for a given User."
                                    },
                                    "attestation": {
                                      "required": [
                                        "clientExtensionResults",
                                        "id",
                                        "rawId",
                                        "response",
                                        "type"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": ["public-key"]
                                        },
                                        "rawId": {
                                          "type": "string"
                                        },
                                        "authenticatorAttachment": {
                                          "type": "string",
                                          "nullable": true,
                                          "enum": ["cross-platform", "platform"]
                                        },
                                        "response": {
                                          "required": [
                                            "attestationObject",
                                            "clientDataJson"
                                          ],
                                          "type": "object",
                                          "properties": {
                                            "clientDataJson": {
                                              "type": "string"
                                            },
                                            "attestationObject": {
                                              "type": "string"
                                            },
                                            "transports": {
                                              "type": "array",
                                              "items": {
                                                "type": "string",
                                                "enum": [
                                                  "AUTHENTICATOR_TRANSPORT_BLE",
                                                  "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                  "AUTHENTICATOR_TRANSPORT_NFC",
                                                  "AUTHENTICATOR_TRANSPORT_USB",
                                                  "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                ]
                                              }
                                            },
                                            "authenticatorAttachment": {
                                              "type": "string",
                                              "nullable": true,
                                              "enum": [
                                                "cross-platform",
                                                "platform"
                                              ]
                                            }
                                          }
                                        },
                                        "clientExtensionResults": {
                                          "type": "object",
                                          "properties": {
                                            "appid": {
                                              "type": "boolean"
                                            },
                                            "appidExclude": {
                                              "type": "boolean"
                                            },
                                            "credProps": {
                                              "required": ["rk"],
                                              "type": "object",
                                              "properties": {
                                                "rk": {
                                                  "type": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "challenge": {
                                      "type": "string",
                                      "description": "Challenge presented for authentication purposes."
                                    }
                                  }
                                }
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              }
                            }
                          },
                          "createUsersIntent": {
                            "required": ["users"],
                            "type": "object",
                            "properties": {
                              "users": {
                                "type": "array",
                                "description": "A list of Users.",
                                "items": {
                                  "required": [
                                    "accessType",
                                    "apiKeys",
                                    "authenticators",
                                    "userName",
                                    "userTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "accessType": {
                                      "type": "string",
                                      "enum": [
                                        "ACCESS_TYPE_WEB",
                                        "ACCESS_TYPE_API",
                                        "ACCESS_TYPE_ALL"
                                      ]
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge",
                                          "userId"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "userId": {
                                            "type": "string",
                                            "description": "Unique identifier for a given User."
                                          },
                                          "attestation": {
                                            "required": [
                                              "clientExtensionResults",
                                              "id",
                                              "rawId",
                                              "response",
                                              "type"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string"
                                              },
                                              "type": {
                                                "type": "string",
                                                "enum": ["public-key"]
                                              },
                                              "rawId": {
                                                "type": "string"
                                              },
                                              "authenticatorAttachment": {
                                                "type": "string",
                                                "nullable": true,
                                                "enum": [
                                                  "cross-platform",
                                                  "platform"
                                                ]
                                              },
                                              "response": {
                                                "required": [
                                                  "attestationObject",
                                                  "clientDataJson"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                  "clientDataJson": {
                                                    "type": "string"
                                                  },
                                                  "attestationObject": {
                                                    "type": "string"
                                                  },
                                                  "transports": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "enum": [
                                                        "AUTHENTICATOR_TRANSPORT_BLE",
                                                        "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                        "AUTHENTICATOR_TRANSPORT_NFC",
                                                        "AUTHENTICATOR_TRANSPORT_USB",
                                                        "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                      ]
                                                    }
                                                  },
                                                  "authenticatorAttachment": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "enum": [
                                                      "cross-platform",
                                                      "platform"
                                                    ]
                                                  }
                                                }
                                              },
                                              "clientExtensionResults": {
                                                "type": "object",
                                                "properties": {
                                                  "appid": {
                                                    "type": "boolean"
                                                  },
                                                  "appidExclude": {
                                                    "type": "boolean"
                                                  },
                                                  "credProps": {
                                                    "required": ["rk"],
                                                    "type": "object",
                                                    "properties": {
                                                      "rk": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          }
                                        }
                                      }
                                    },
                                    "userTags": {
                                      "type": "array",
                                      "description": "A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createPrivateKeysIntent": {
                            "required": ["privateKeys"],
                            "type": "object",
                            "properties": {
                              "privateKeys": {
                                "type": "array",
                                "description": "A list of Private Keys.",
                                "items": {
                                  "required": [
                                    "addressFormats",
                                    "curve",
                                    "privateKeyName",
                                    "privateKeyTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "privateKeyName": {
                                      "type": "string",
                                      "description": "Human-readable name for a Private Key."
                                    },
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "privateKeyTags": {
                                      "type": "array",
                                      "description": "A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "addressFormats": {
                                      "type": "array",
                                      "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ADDRESS_FORMAT_UNCOMPRESSED",
                                          "ADDRESS_FORMAT_COMPRESSED",
                                          "ADDRESS_FORMAT_ETHEREUM",
                                          "ADDRESS_FORMAT_SOLANA",
                                          "ADDRESS_FORMAT_COSMOS",
                                          "ADDRESS_FORMAT_TRON",
                                          "ADDRESS_FORMAT_SUI",
                                          "ADDRESS_FORMAT_APTOS",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                          "ADDRESS_FORMAT_SEI",
                                          "ADDRESS_FORMAT_XLM",
                                          "ADDRESS_FORMAT_DOGE_MAINNET",
                                          "ADDRESS_FORMAT_DOGE_TESTNET",
                                          "ADDRESS_FORMAT_TON_V3R2",
                                          "ADDRESS_FORMAT_TON_V4R2",
                                          "ADDRESS_FORMAT_XRP"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "signRawPayloadIntent": {
                            "required": [
                              "encoding",
                              "hashFunction",
                              "payload",
                              "privateKeyId"
                            ],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              },
                              "payload": {
                                "type": "string",
                                "description": "Raw unsigned payload to be signed."
                              },
                              "encoding": {
                                "type": "string",
                                "enum": [
                                  "PAYLOAD_ENCODING_HEXADECIMAL",
                                  "PAYLOAD_ENCODING_TEXT_UTF8"
                                ]
                              },
                              "hashFunction": {
                                "type": "string",
                                "enum": [
                                  "HASH_FUNCTION_NO_OP",
                                  "HASH_FUNCTION_SHA256",
                                  "HASH_FUNCTION_KECCAK256",
                                  "HASH_FUNCTION_NOT_APPLICABLE"
                                ]
                              }
                            }
                          },
                          "createInvitationsIntent": {
                            "required": ["invitations"],
                            "type": "object",
                            "properties": {
                              "invitations": {
                                "type": "array",
                                "description": "A list of Invitations.",
                                "items": {
                                  "required": [
                                    "accessType",
                                    "receiverUserEmail",
                                    "receiverUserName",
                                    "receiverUserTags",
                                    "senderUserId"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "receiverUserName": {
                                      "type": "string",
                                      "description": "The name of the intended Invitation recipient."
                                    },
                                    "receiverUserEmail": {
                                      "type": "string",
                                      "description": "The email address of the intended Invitation recipient."
                                    },
                                    "receiverUserTags": {
                                      "type": "array",
                                      "description": "A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "accessType": {
                                      "type": "string",
                                      "enum": [
                                        "ACCESS_TYPE_WEB",
                                        "ACCESS_TYPE_API",
                                        "ACCESS_TYPE_ALL"
                                      ]
                                    },
                                    "senderUserId": {
                                      "type": "string",
                                      "description": "Unique identifier for the Sender of an Invitation."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "acceptInvitationIntent": {
                            "required": [
                              "authenticator",
                              "invitationId",
                              "userId"
                            ],
                            "type": "object",
                            "properties": {
                              "invitationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Invitation object."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "authenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge",
                                  "userId"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "userId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given User."
                                  },
                                  "attestation": {
                                    "required": [
                                      "clientExtensionResults",
                                      "id",
                                      "rawId",
                                      "response",
                                      "type"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": ["public-key"]
                                      },
                                      "rawId": {
                                        "type": "string"
                                      },
                                      "authenticatorAttachment": {
                                        "type": "string",
                                        "nullable": true,
                                        "enum": ["cross-platform", "platform"]
                                      },
                                      "response": {
                                        "required": [
                                          "attestationObject",
                                          "clientDataJson"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "clientDataJson": {
                                            "type": "string"
                                          },
                                          "attestationObject": {
                                            "type": "string"
                                          },
                                          "transports": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "AUTHENTICATOR_TRANSPORT_BLE",
                                                "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                "AUTHENTICATOR_TRANSPORT_NFC",
                                                "AUTHENTICATOR_TRANSPORT_USB",
                                                "AUTHENTICATOR_TRANSPORT_HYBRID"
                                              ]
                                            }
                                          },
                                          "authenticatorAttachment": {
                                            "type": "string",
                                            "nullable": true,
                                            "enum": [
                                              "cross-platform",
                                              "platform"
                                            ]
                                          }
                                        }
                                      },
                                      "clientExtensionResults": {
                                        "type": "object",
                                        "properties": {
                                          "appid": {
                                            "type": "boolean"
                                          },
                                          "appidExclude": {
                                            "type": "boolean"
                                          },
                                          "credProps": {
                                            "required": ["rk"],
                                            "type": "object",
                                            "properties": {
                                              "rk": {
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  }
                                }
                              }
                            }
                          },
                          "createPolicyIntent": {
                            "required": ["effect", "policyName", "selectors"],
                            "type": "object",
                            "properties": {
                              "policyName": {
                                "type": "string",
                                "description": "Human-readable name for a Policy."
                              },
                              "selectors": {
                                "type": "array",
                                "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "subject": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "OPERATOR_EQUAL",
                                        "OPERATOR_MORE_THAN",
                                        "OPERATOR_MORE_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL",
                                        "OPERATOR_CONTAINS",
                                        "OPERATOR_NOT_EQUAL",
                                        "OPERATOR_IN",
                                        "OPERATOR_NOT_IN",
                                        "OPERATOR_CONTAINS_ONE",
                                        "OPERATOR_CONTAINS_ALL"
                                      ]
                                    },
                                    "target": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "effect": {
                                "type": "string",
                                "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
                              },
                              "notes": {
                                "type": "string"
                              }
                            }
                          },
                          "disablePrivateKeyIntent": {
                            "required": ["privateKeyId"],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              }
                            }
                          },
                          "deleteUsersIntent": {
                            "required": ["userIds"],
                            "type": "object",
                            "properties": {
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteAuthenticatorsIntent": {
                            "required": ["authenticatorIds", "userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "authenticatorIds": {
                                "type": "array",
                                "description": "A list of Authenticator IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteInvitationIntent": {
                            "required": ["invitationId"],
                            "type": "object",
                            "properties": {
                              "invitationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Invitation object."
                              }
                            }
                          },
                          "deleteOrganizationIntent": {
                            "required": ["organizationId"],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization."
                              }
                            }
                          },
                          "deletePolicyIntent": {
                            "required": ["policyId"],
                            "type": "object",
                            "properties": {
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Policy."
                              }
                            }
                          },
                          "createUserTagIntent": {
                            "required": ["userIds", "userTagName"],
                            "type": "object",
                            "properties": {
                              "userTagName": {
                                "type": "string",
                                "description": "Human-readable name for a User Tag."
                              },
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteUserTagsIntent": {
                            "required": ["userTagIds"],
                            "type": "object",
                            "properties": {
                              "userTagIds": {
                                "type": "array",
                                "description": "A list of User Tag IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "signTransactionIntent": {
                            "required": [
                              "privateKeyId",
                              "type",
                              "unsignedTransaction"
                            ],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              },
                              "unsignedTransaction": {
                                "type": "string",
                                "description": "Raw unsigned transaction to be signed by a particular Private Key."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TRANSACTION_TYPE_ETHEREUM",
                                  "TRANSACTION_TYPE_SOLANA"
                                ]
                              }
                            }
                          },
                          "createApiKeysIntent": {
                            "required": ["apiKeys", "userId"],
                            "type": "object",
                            "properties": {
                              "apiKeys": {
                                "type": "array",
                                "description": "A list of API Keys.",
                                "items": {
                                  "required": ["apiKeyName", "publicKey"],
                                  "type": "object",
                                  "properties": {
                                    "apiKeyName": {
                                      "type": "string",
                                      "description": "Human-readable name for an API Key."
                                    },
                                    "publicKey": {
                                      "type": "string",
                                      "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                    },
                                    "expirationSeconds": {
                                      "type": "string",
                                      "description": "Optional window (in seconds) indicating how long the API Key should last."
                                    }
                                  }
                                }
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              }
                            }
                          },
                          "deleteApiKeysIntent": {
                            "required": ["apiKeyIds", "userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "apiKeyIds": {
                                "type": "array",
                                "description": "A list of API Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "approveActivityIntent": {
                            "required": ["fingerprint"],
                            "type": "object",
                            "properties": {
                              "fingerprint": {
                                "type": "string",
                                "description": "An artifact verifying a User's action."
                              }
                            }
                          },
                          "rejectActivityIntent": {
                            "required": ["fingerprint"],
                            "type": "object",
                            "properties": {
                              "fingerprint": {
                                "type": "string",
                                "description": "An artifact verifying a User's action."
                              }
                            }
                          },
                          "createPrivateKeyTagIntent": {
                            "required": ["privateKeyIds", "privateKeyTagName"],
                            "type": "object",
                            "properties": {
                              "privateKeyTagName": {
                                "type": "string",
                                "description": "Human-readable name for a Private Key Tag."
                              },
                              "privateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deletePrivateKeyTagsIntent": {
                            "required": ["privateKeyTagIds"],
                            "type": "object",
                            "properties": {
                              "privateKeyTagIds": {
                                "type": "array",
                                "description": "A list of Private Key Tag IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createPolicyIntentV2": {
                            "required": ["effect", "policyName", "selectors"],
                            "type": "object",
                            "properties": {
                              "policyName": {
                                "type": "string",
                                "description": "Human-readable name for a Policy."
                              },
                              "selectors": {
                                "type": "array",
                                "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "subject": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "OPERATOR_EQUAL",
                                        "OPERATOR_MORE_THAN",
                                        "OPERATOR_MORE_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL",
                                        "OPERATOR_CONTAINS",
                                        "OPERATOR_NOT_EQUAL",
                                        "OPERATOR_IN",
                                        "OPERATOR_NOT_IN",
                                        "OPERATOR_CONTAINS_ONE",
                                        "OPERATOR_CONTAINS_ALL"
                                      ]
                                    },
                                    "targets": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "effect": {
                                "type": "string",
                                "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
                              },
                              "notes": {
                                "type": "string"
                              }
                            }
                          },
                          "setPaymentMethodIntent": {
                            "required": [
                              "cardHolderEmail",
                              "cardHolderName",
                              "cvv",
                              "expiryMonth",
                              "expiryYear",
                              "number"
                            ],
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "description": "The account number of the customer's credit card."
                              },
                              "cvv": {
                                "type": "string",
                                "description": "The verification digits of the customer's credit card."
                              },
                              "expiryMonth": {
                                "type": "string",
                                "description": "The month that the credit card expires."
                              },
                              "expiryYear": {
                                "type": "string",
                                "description": "The year that the credit card expires."
                              },
                              "cardHolderEmail": {
                                "type": "string",
                                "description": "The email that will receive invoices for the credit card."
                              },
                              "cardHolderName": {
                                "type": "string",
                                "description": "The name associated with the credit card."
                              }
                            }
                          },
                          "activateBillingTierIntent": {
                            "required": ["productId"],
                            "type": "object",
                            "properties": {
                              "productId": {
                                "type": "string",
                                "description": "The product that the customer wants to subscribe to."
                              }
                            }
                          },
                          "deletePaymentMethodIntent": {
                            "required": ["paymentMethodId"],
                            "type": "object",
                            "properties": {
                              "paymentMethodId": {
                                "type": "string",
                                "description": "The payment method that the customer wants to remove."
                              }
                            }
                          },
                          "createPolicyIntentV3": {
                            "required": ["effect", "policyName"],
                            "type": "object",
                            "properties": {
                              "policyName": {
                                "type": "string",
                                "description": "Human-readable name for a Policy."
                              },
                              "effect": {
                                "type": "string",
                                "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
                              },
                              "condition": {
                                "type": "string",
                                "description": "The condition expression that triggers the Effect"
                              },
                              "consensus": {
                                "type": "string",
                                "description": "The consensus expression that triggers the Effect"
                              },
                              "notes": {
                                "type": "string"
                              }
                            }
                          },
                          "createApiOnlyUsersIntent": {
                            "required": ["apiOnlyUsers"],
                            "type": "object",
                            "properties": {
                              "apiOnlyUsers": {
                                "type": "array",
                                "description": "A list of API-only Users to create.",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "userName",
                                    "userTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "The name of the new API-only User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The email address for this API-only User (optional)."
                                    },
                                    "userTags": {
                                      "type": "array",
                                      "description": "A list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "updateRootQuorumIntent": {
                            "required": ["threshold", "userIds"],
                            "type": "object",
                            "properties": {
                              "threshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach quorum.",
                                "format": "int32"
                              },
                              "userIds": {
                                "type": "array",
                                "description": "The unique identifiers of users who comprise the quorum set.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "updateUserTagIntent": {
                            "required": [
                              "addUserIds",
                              "removeUserIds",
                              "userTagId"
                            ],
                            "type": "object",
                            "properties": {
                              "userTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given User Tag."
                              },
                              "newUserTagName": {
                                "type": "string",
                                "description": "The new, human-readable name for the tag with the given ID."
                              },
                              "addUserIds": {
                                "type": "array",
                                "description": "A list of User IDs to add this tag to.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "removeUserIds": {
                                "type": "array",
                                "description": "A list of User IDs to remove this tag from.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "updatePrivateKeyTagIntent": {
                            "required": [
                              "addPrivateKeyIds",
                              "privateKeyTagId",
                              "removePrivateKeyIds"
                            ],
                            "type": "object",
                            "properties": {
                              "privateKeyTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key Tag."
                              },
                              "newPrivateKeyTagName": {
                                "type": "string",
                                "description": "The new, human-readable name for the tag with the given ID."
                              },
                              "addPrivateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Keys IDs to add this tag to.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "removePrivateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Key IDs to remove this tag from.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createAuthenticatorsIntentV2": {
                            "required": ["authenticators", "userId"],
                            "type": "object",
                            "properties": {
                              "authenticators": {
                                "type": "array",
                                "description": "A list of Authenticators.",
                                "items": {
                                  "required": [
                                    "attestation",
                                    "authenticatorName",
                                    "challenge"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "authenticatorName": {
                                      "type": "string",
                                      "description": "Human-readable name for an Authenticator."
                                    },
                                    "challenge": {
                                      "type": "string",
                                      "description": "Challenge presented for authentication purposes."
                                    },
                                    "attestation": {
                                      "required": [
                                        "attestationObject",
                                        "clientDataJson",
                                        "credentialId",
                                        "transports"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "credentialId": {
                                          "type": "string",
                                          "description": "The cbor encoded then base64 url encoded id of the credential."
                                        },
                                        "clientDataJson": {
                                          "type": "string",
                                          "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                        },
                                        "attestationObject": {
                                          "type": "string",
                                          "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                        },
                                        "transports": {
                                          "type": "array",
                                          "description": "The type of authenticator transports.",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "AUTHENTICATOR_TRANSPORT_BLE",
                                              "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                              "AUTHENTICATOR_TRANSPORT_NFC",
                                              "AUTHENTICATOR_TRANSPORT_USB",
                                              "AUTHENTICATOR_TRANSPORT_HYBRID"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              }
                            }
                          },
                          "acceptInvitationIntentV2": {
                            "required": [
                              "authenticator",
                              "invitationId",
                              "userId"
                            ],
                            "type": "object",
                            "properties": {
                              "invitationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Invitation object."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "authenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  },
                                  "attestation": {
                                    "required": [
                                      "attestationObject",
                                      "clientDataJson",
                                      "credentialId",
                                      "transports"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "credentialId": {
                                        "type": "string",
                                        "description": "The cbor encoded then base64 url encoded id of the credential."
                                      },
                                      "clientDataJson": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                      },
                                      "attestationObject": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                      },
                                      "transports": {
                                        "type": "array",
                                        "description": "The type of authenticator transports.",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "AUTHENTICATOR_TRANSPORT_BLE",
                                            "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                            "AUTHENTICATOR_TRANSPORT_NFC",
                                            "AUTHENTICATOR_TRANSPORT_USB",
                                            "AUTHENTICATOR_TRANSPORT_HYBRID"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createOrganizationIntentV2": {
                            "required": [
                              "organizationName",
                              "rootAuthenticator",
                              "rootEmail"
                            ],
                            "type": "object",
                            "properties": {
                              "organizationName": {
                                "type": "string",
                                "description": "Human-readable name for an Organization."
                              },
                              "rootEmail": {
                                "type": "string",
                                "description": "The root user's email address."
                              },
                              "rootAuthenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  },
                                  "attestation": {
                                    "required": [
                                      "attestationObject",
                                      "clientDataJson",
                                      "credentialId",
                                      "transports"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "credentialId": {
                                        "type": "string",
                                        "description": "The cbor encoded then base64 url encoded id of the credential."
                                      },
                                      "clientDataJson": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                      },
                                      "attestationObject": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                      },
                                      "transports": {
                                        "type": "array",
                                        "description": "The type of authenticator transports.",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "AUTHENTICATOR_TRANSPORT_BLE",
                                            "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                            "AUTHENTICATOR_TRANSPORT_NFC",
                                            "AUTHENTICATOR_TRANSPORT_USB",
                                            "AUTHENTICATOR_TRANSPORT_HYBRID"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootUserId": {
                                "type": "string",
                                "description": "Unique identifier for the root user object."
                              }
                            }
                          },
                          "createUsersIntentV2": {
                            "required": ["users"],
                            "type": "object",
                            "properties": {
                              "users": {
                                "type": "array",
                                "description": "A list of Users.",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "userName",
                                    "userTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "userTags": {
                                      "type": "array",
                                      "description": "A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createSubOrganizationIntent": {
                            "required": ["name", "rootAuthenticator"],
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootAuthenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  },
                                  "attestation": {
                                    "required": [
                                      "attestationObject",
                                      "clientDataJson",
                                      "credentialId",
                                      "transports"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "credentialId": {
                                        "type": "string",
                                        "description": "The cbor encoded then base64 url encoded id of the credential."
                                      },
                                      "clientDataJson": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                      },
                                      "attestationObject": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                      },
                                      "transports": {
                                        "type": "array",
                                        "description": "The type of authenticator transports.",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "AUTHENTICATOR_TRANSPORT_BLE",
                                            "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                            "AUTHENTICATOR_TRANSPORT_NFC",
                                            "AUTHENTICATOR_TRANSPORT_USB",
                                            "AUTHENTICATOR_TRANSPORT_HYBRID"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createSubOrganizationIntentV2": {
                            "required": [
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              }
                            }
                          },
                          "updateAllowedOriginsIntent": {
                            "required": ["allowedOrigins"],
                            "type": "object",
                            "properties": {
                              "allowedOrigins": {
                                "type": "array",
                                "description": "Additional origins requests are allowed from besides Turnkey origins",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createPrivateKeysIntentV2": {
                            "required": ["privateKeys"],
                            "type": "object",
                            "properties": {
                              "privateKeys": {
                                "type": "array",
                                "description": "A list of Private Keys.",
                                "items": {
                                  "required": [
                                    "addressFormats",
                                    "curve",
                                    "privateKeyName",
                                    "privateKeyTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "privateKeyName": {
                                      "type": "string",
                                      "description": "Human-readable name for a Private Key."
                                    },
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "privateKeyTags": {
                                      "type": "array",
                                      "description": "A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "addressFormats": {
                                      "type": "array",
                                      "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ADDRESS_FORMAT_UNCOMPRESSED",
                                          "ADDRESS_FORMAT_COMPRESSED",
                                          "ADDRESS_FORMAT_ETHEREUM",
                                          "ADDRESS_FORMAT_SOLANA",
                                          "ADDRESS_FORMAT_COSMOS",
                                          "ADDRESS_FORMAT_TRON",
                                          "ADDRESS_FORMAT_SUI",
                                          "ADDRESS_FORMAT_APTOS",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                          "ADDRESS_FORMAT_SEI",
                                          "ADDRESS_FORMAT_XLM",
                                          "ADDRESS_FORMAT_DOGE_MAINNET",
                                          "ADDRESS_FORMAT_DOGE_TESTNET",
                                          "ADDRESS_FORMAT_TON_V3R2",
                                          "ADDRESS_FORMAT_TON_V4R2",
                                          "ADDRESS_FORMAT_XRP"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "updateUserIntent": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "userName": {
                                "type": "string",
                                "description": "Human-readable name for a User."
                              },
                              "userEmail": {
                                "type": "string",
                                "description": "The user's email address."
                              },
                              "userTagIds": {
                                "type": "array",
                                "description": "An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "userPhoneNumber": {
                                "type": "string",
                                "description": "The user's phone number in E.164 format e.g. +13214567890"
                              }
                            }
                          },
                          "updatePolicyIntent": {
                            "required": ["policyId"],
                            "type": "object",
                            "properties": {
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Policy."
                              },
                              "policyName": {
                                "type": "string",
                                "description": "Human-readable name for a Policy."
                              },
                              "policyEffect": {
                                "type": "string",
                                "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
                              },
                              "policyCondition": {
                                "type": "string",
                                "description": "The condition expression that triggers the Effect (optional)."
                              },
                              "policyConsensus": {
                                "type": "string",
                                "description": "The consensus expression that triggers the Effect (optional)."
                              },
                              "policyNotes": {
                                "type": "string",
                                "description": "Accompanying notes for a Policy (optional)."
                              }
                            }
                          },
                          "setPaymentMethodIntentV2": {
                            "required": [
                              "cardHolderEmail",
                              "cardHolderName",
                              "paymentMethodId"
                            ],
                            "type": "object",
                            "properties": {
                              "paymentMethodId": {
                                "type": "string",
                                "description": "The id of the payment method that was created clientside."
                              },
                              "cardHolderEmail": {
                                "type": "string",
                                "description": "The email that will receive invoices for the credit card."
                              },
                              "cardHolderName": {
                                "type": "string",
                                "description": "The name associated with the credit card."
                              }
                            }
                          },
                          "createSubOrganizationIntentV3": {
                            "required": [
                              "privateKeys",
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              },
                              "privateKeys": {
                                "type": "array",
                                "description": "A list of Private Keys.",
                                "items": {
                                  "required": [
                                    "addressFormats",
                                    "curve",
                                    "privateKeyName",
                                    "privateKeyTags"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "privateKeyName": {
                                      "type": "string",
                                      "description": "Human-readable name for a Private Key."
                                    },
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "privateKeyTags": {
                                      "type": "array",
                                      "description": "A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "addressFormats": {
                                      "type": "array",
                                      "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "ADDRESS_FORMAT_UNCOMPRESSED",
                                          "ADDRESS_FORMAT_COMPRESSED",
                                          "ADDRESS_FORMAT_ETHEREUM",
                                          "ADDRESS_FORMAT_SOLANA",
                                          "ADDRESS_FORMAT_COSMOS",
                                          "ADDRESS_FORMAT_TRON",
                                          "ADDRESS_FORMAT_SUI",
                                          "ADDRESS_FORMAT_APTOS",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                          "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                          "ADDRESS_FORMAT_SEI",
                                          "ADDRESS_FORMAT_XLM",
                                          "ADDRESS_FORMAT_DOGE_MAINNET",
                                          "ADDRESS_FORMAT_DOGE_TESTNET",
                                          "ADDRESS_FORMAT_TON_V3R2",
                                          "ADDRESS_FORMAT_TON_V4R2",
                                          "ADDRESS_FORMAT_XRP"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createWalletIntent": {
                            "required": ["accounts", "walletName"],
                            "type": "object",
                            "properties": {
                              "walletName": {
                                "type": "string",
                                "description": "Human-readable name for a Wallet."
                              },
                              "accounts": {
                                "type": "array",
                                "description": "A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.",
                                "items": {
                                  "required": [
                                    "addressFormat",
                                    "curve",
                                    "path",
                                    "pathFormat"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "pathFormat": {
                                      "type": "string",
                                      "enum": ["PATH_FORMAT_BIP32"]
                                    },
                                    "path": {
                                      "type": "string",
                                      "description": "Path used to generate a wallet Account."
                                    },
                                    "addressFormat": {
                                      "type": "string",
                                      "enum": [
                                        "ADDRESS_FORMAT_UNCOMPRESSED",
                                        "ADDRESS_FORMAT_COMPRESSED",
                                        "ADDRESS_FORMAT_ETHEREUM",
                                        "ADDRESS_FORMAT_SOLANA",
                                        "ADDRESS_FORMAT_COSMOS",
                                        "ADDRESS_FORMAT_TRON",
                                        "ADDRESS_FORMAT_SUI",
                                        "ADDRESS_FORMAT_APTOS",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                        "ADDRESS_FORMAT_SEI",
                                        "ADDRESS_FORMAT_XLM",
                                        "ADDRESS_FORMAT_DOGE_MAINNET",
                                        "ADDRESS_FORMAT_DOGE_TESTNET",
                                        "ADDRESS_FORMAT_TON_V3R2",
                                        "ADDRESS_FORMAT_TON_V4R2",
                                        "ADDRESS_FORMAT_XRP"
                                      ]
                                    }
                                  }
                                }
                              },
                              "mnemonicLength": {
                                "type": "integer",
                                "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.",
                                "format": "int32"
                              }
                            }
                          },
                          "createWalletAccountsIntent": {
                            "required": ["accounts", "walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a given Wallet."
                              },
                              "accounts": {
                                "type": "array",
                                "description": "A list of wallet Accounts.",
                                "items": {
                                  "required": [
                                    "addressFormat",
                                    "curve",
                                    "path",
                                    "pathFormat"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "pathFormat": {
                                      "type": "string",
                                      "enum": ["PATH_FORMAT_BIP32"]
                                    },
                                    "path": {
                                      "type": "string",
                                      "description": "Path used to generate a wallet Account."
                                    },
                                    "addressFormat": {
                                      "type": "string",
                                      "enum": [
                                        "ADDRESS_FORMAT_UNCOMPRESSED",
                                        "ADDRESS_FORMAT_COMPRESSED",
                                        "ADDRESS_FORMAT_ETHEREUM",
                                        "ADDRESS_FORMAT_SOLANA",
                                        "ADDRESS_FORMAT_COSMOS",
                                        "ADDRESS_FORMAT_TRON",
                                        "ADDRESS_FORMAT_SUI",
                                        "ADDRESS_FORMAT_APTOS",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                        "ADDRESS_FORMAT_SEI",
                                        "ADDRESS_FORMAT_XLM",
                                        "ADDRESS_FORMAT_DOGE_MAINNET",
                                        "ADDRESS_FORMAT_DOGE_TESTNET",
                                        "ADDRESS_FORMAT_TON_V3R2",
                                        "ADDRESS_FORMAT_TON_V4R2",
                                        "ADDRESS_FORMAT_XRP"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "initUserEmailRecoveryIntent": {
                            "required": ["email", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "Email of the user starting recovery"
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the recovery bundle will be encrypted."
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the recovery credential is valid. If not provided, a default of 15 minutes will be used."
                              },
                              "emailCustomization": {
                                "type": "object",
                                "properties": {
                                  "appName": {
                                    "type": "string",
                                    "description": "The name of the application."
                                  },
                                  "logoUrl": {
                                    "type": "string",
                                    "description": "A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px."
                                  },
                                  "magicLinkTemplate": {
                                    "type": "string",
                                    "description": "A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`."
                                  },
                                  "templateVariables": {
                                    "type": "string",
                                    "description": "JSON object containing key/value pairs to be used with custom templates."
                                  },
                                  "templateId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template."
                                  }
                                }
                              }
                            }
                          },
                          "recoverUserIntent": {
                            "required": ["authenticator", "userId"],
                            "type": "object",
                            "properties": {
                              "authenticator": {
                                "required": [
                                  "attestation",
                                  "authenticatorName",
                                  "challenge"
                                ],
                                "type": "object",
                                "properties": {
                                  "authenticatorName": {
                                    "type": "string",
                                    "description": "Human-readable name for an Authenticator."
                                  },
                                  "challenge": {
                                    "type": "string",
                                    "description": "Challenge presented for authentication purposes."
                                  },
                                  "attestation": {
                                    "required": [
                                      "attestationObject",
                                      "clientDataJson",
                                      "credentialId",
                                      "transports"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "credentialId": {
                                        "type": "string",
                                        "description": "The cbor encoded then base64 url encoded id of the credential."
                                      },
                                      "clientDataJson": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                      },
                                      "attestationObject": {
                                        "type": "string",
                                        "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                      },
                                      "transports": {
                                        "type": "array",
                                        "description": "The type of authenticator transports.",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "AUTHENTICATOR_TRANSPORT_BLE",
                                            "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                            "AUTHENTICATOR_TRANSPORT_NFC",
                                            "AUTHENTICATOR_TRANSPORT_USB",
                                            "AUTHENTICATOR_TRANSPORT_HYBRID"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for the user performing recovery."
                              }
                            }
                          },
                          "setOrganizationFeatureIntent": {
                            "required": ["name", "value"],
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "enum": [
                                  "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY",
                                  "FEATURE_NAME_WEBAUTHN_ORIGINS",
                                  "FEATURE_NAME_EMAIL_AUTH",
                                  "FEATURE_NAME_EMAIL_RECOVERY",
                                  "FEATURE_NAME_WEBHOOK",
                                  "FEATURE_NAME_SMS_AUTH",
                                  "FEATURE_NAME_OTP_EMAIL_AUTH"
                                ]
                              },
                              "value": {
                                "type": "string",
                                "description": "Optional value for the feature. Will override existing values if feature is already set."
                              }
                            }
                          },
                          "removeOrganizationFeatureIntent": {
                            "required": ["name"],
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "enum": [
                                  "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY",
                                  "FEATURE_NAME_WEBAUTHN_ORIGINS",
                                  "FEATURE_NAME_EMAIL_AUTH",
                                  "FEATURE_NAME_EMAIL_RECOVERY",
                                  "FEATURE_NAME_WEBHOOK",
                                  "FEATURE_NAME_SMS_AUTH",
                                  "FEATURE_NAME_OTP_EMAIL_AUTH"
                                ]
                              }
                            }
                          },
                          "signRawPayloadIntentV2": {
                            "required": [
                              "encoding",
                              "hashFunction",
                              "payload",
                              "signWith"
                            ],
                            "type": "object",
                            "properties": {
                              "signWith": {
                                "type": "string",
                                "description": "A Wallet account address, Private Key address, or Private Key identifier."
                              },
                              "payload": {
                                "type": "string",
                                "description": "Raw unsigned payload to be signed."
                              },
                              "encoding": {
                                "type": "string",
                                "enum": [
                                  "PAYLOAD_ENCODING_HEXADECIMAL",
                                  "PAYLOAD_ENCODING_TEXT_UTF8"
                                ]
                              },
                              "hashFunction": {
                                "type": "string",
                                "enum": [
                                  "HASH_FUNCTION_NO_OP",
                                  "HASH_FUNCTION_SHA256",
                                  "HASH_FUNCTION_KECCAK256",
                                  "HASH_FUNCTION_NOT_APPLICABLE"
                                ]
                              }
                            }
                          },
                          "signTransactionIntentV2": {
                            "required": [
                              "signWith",
                              "type",
                              "unsignedTransaction"
                            ],
                            "type": "object",
                            "properties": {
                              "signWith": {
                                "type": "string",
                                "description": "A Wallet account address, Private Key address, or Private Key identifier."
                              },
                              "unsignedTransaction": {
                                "type": "string",
                                "description": "Raw unsigned transaction to be signed"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "TRANSACTION_TYPE_ETHEREUM",
                                  "TRANSACTION_TYPE_SOLANA"
                                ]
                              }
                            }
                          },
                          "exportPrivateKeyIntent": {
                            "required": ["privateKeyId", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
                              }
                            }
                          },
                          "exportWalletIntent": {
                            "required": ["targetPublicKey", "walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a given Wallet."
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
                              },
                              "language": {
                                "type": "string",
                                "enum": [
                                  "MNEMONIC_LANGUAGE_ENGLISH",
                                  "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE",
                                  "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE",
                                  "MNEMONIC_LANGUAGE_CZECH",
                                  "MNEMONIC_LANGUAGE_FRENCH",
                                  "MNEMONIC_LANGUAGE_ITALIAN",
                                  "MNEMONIC_LANGUAGE_JAPANESE",
                                  "MNEMONIC_LANGUAGE_KOREAN",
                                  "MNEMONIC_LANGUAGE_SPANISH"
                                ]
                              }
                            }
                          },
                          "createSubOrganizationIntentV4": {
                            "required": [
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              },
                              "wallet": {
                                "required": ["accounts", "walletName"],
                                "type": "object",
                                "properties": {
                                  "walletName": {
                                    "type": "string",
                                    "description": "Human-readable name for a Wallet."
                                  },
                                  "accounts": {
                                    "type": "array",
                                    "description": "A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.",
                                    "items": {
                                      "required": [
                                        "addressFormat",
                                        "curve",
                                        "path",
                                        "pathFormat"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "curve": {
                                          "type": "string",
                                          "enum": [
                                            "CURVE_SECP256K1",
                                            "CURVE_ED25519"
                                          ]
                                        },
                                        "pathFormat": {
                                          "type": "string",
                                          "enum": ["PATH_FORMAT_BIP32"]
                                        },
                                        "path": {
                                          "type": "string",
                                          "description": "Path used to generate a wallet Account."
                                        },
                                        "addressFormat": {
                                          "type": "string",
                                          "enum": [
                                            "ADDRESS_FORMAT_UNCOMPRESSED",
                                            "ADDRESS_FORMAT_COMPRESSED",
                                            "ADDRESS_FORMAT_ETHEREUM",
                                            "ADDRESS_FORMAT_SOLANA",
                                            "ADDRESS_FORMAT_COSMOS",
                                            "ADDRESS_FORMAT_TRON",
                                            "ADDRESS_FORMAT_SUI",
                                            "ADDRESS_FORMAT_APTOS",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                            "ADDRESS_FORMAT_SEI",
                                            "ADDRESS_FORMAT_XLM",
                                            "ADDRESS_FORMAT_DOGE_MAINNET",
                                            "ADDRESS_FORMAT_DOGE_TESTNET",
                                            "ADDRESS_FORMAT_TON_V3R2",
                                            "ADDRESS_FORMAT_TON_V4R2",
                                            "ADDRESS_FORMAT_XRP"
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "mnemonicLength": {
                                    "type": "integer",
                                    "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.",
                                    "format": "int32"
                                  }
                                }
                              },
                              "disableEmailRecovery": {
                                "type": "boolean",
                                "description": "Disable email recovery for the sub-organization"
                              },
                              "disableEmailAuth": {
                                "type": "boolean",
                                "description": "Disable email auth for the sub-organization"
                              }
                            }
                          },
                          "emailAuthIntent": {
                            "required": ["email", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "Email of the authenticating user."
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted."
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              },
                              "emailCustomization": {
                                "type": "object",
                                "properties": {
                                  "appName": {
                                    "type": "string",
                                    "description": "The name of the application."
                                  },
                                  "logoUrl": {
                                    "type": "string",
                                    "description": "A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px."
                                  },
                                  "magicLinkTemplate": {
                                    "type": "string",
                                    "description": "A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`."
                                  },
                                  "templateVariables": {
                                    "type": "string",
                                    "description": "JSON object containing key/value pairs to be used with custom templates."
                                  },
                                  "templateId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template."
                                  }
                                }
                              },
                              "invalidateExisting": {
                                "type": "boolean",
                                "description": "Invalidate all other previously generated Email Auth API keys"
                              },
                              "sendFromEmailAddress": {
                                "type": "string",
                                "description": "Optional custom email address from which to send the email"
                              }
                            }
                          },
                          "exportWalletAccountIntent": {
                            "required": ["address", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "description": "Address to identify Wallet Account."
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
                              }
                            }
                          },
                          "initImportWalletIntent": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User importing a Wallet."
                              }
                            }
                          },
                          "importWalletIntent": {
                            "required": [
                              "accounts",
                              "encryptedBundle",
                              "userId",
                              "walletName"
                            ],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User importing a Wallet."
                              },
                              "walletName": {
                                "type": "string",
                                "description": "Human-readable name for a Wallet."
                              },
                              "encryptedBundle": {
                                "type": "string",
                                "description": "Bundle containing a wallet mnemonic encrypted to the enclave's target public key."
                              },
                              "accounts": {
                                "type": "array",
                                "description": "A list of wallet Accounts.",
                                "items": {
                                  "required": [
                                    "addressFormat",
                                    "curve",
                                    "path",
                                    "pathFormat"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "curve": {
                                      "type": "string",
                                      "enum": [
                                        "CURVE_SECP256K1",
                                        "CURVE_ED25519"
                                      ]
                                    },
                                    "pathFormat": {
                                      "type": "string",
                                      "enum": ["PATH_FORMAT_BIP32"]
                                    },
                                    "path": {
                                      "type": "string",
                                      "description": "Path used to generate a wallet Account."
                                    },
                                    "addressFormat": {
                                      "type": "string",
                                      "enum": [
                                        "ADDRESS_FORMAT_UNCOMPRESSED",
                                        "ADDRESS_FORMAT_COMPRESSED",
                                        "ADDRESS_FORMAT_ETHEREUM",
                                        "ADDRESS_FORMAT_SOLANA",
                                        "ADDRESS_FORMAT_COSMOS",
                                        "ADDRESS_FORMAT_TRON",
                                        "ADDRESS_FORMAT_SUI",
                                        "ADDRESS_FORMAT_APTOS",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                        "ADDRESS_FORMAT_SEI",
                                        "ADDRESS_FORMAT_XLM",
                                        "ADDRESS_FORMAT_DOGE_MAINNET",
                                        "ADDRESS_FORMAT_DOGE_TESTNET",
                                        "ADDRESS_FORMAT_TON_V3R2",
                                        "ADDRESS_FORMAT_TON_V4R2",
                                        "ADDRESS_FORMAT_XRP"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "initImportPrivateKeyIntent": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User importing a Private Key."
                              }
                            }
                          },
                          "importPrivateKeyIntent": {
                            "required": [
                              "addressFormats",
                              "curve",
                              "encryptedBundle",
                              "privateKeyName",
                              "userId"
                            ],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User importing a Private Key."
                              },
                              "privateKeyName": {
                                "type": "string",
                                "description": "Human-readable name for a Private Key."
                              },
                              "encryptedBundle": {
                                "type": "string",
                                "description": "Bundle containing a raw private key encrypted to the enclave's target public key."
                              },
                              "curve": {
                                "type": "string",
                                "enum": ["CURVE_SECP256K1", "CURVE_ED25519"]
                              },
                              "addressFormats": {
                                "type": "array",
                                "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum).",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "ADDRESS_FORMAT_UNCOMPRESSED",
                                    "ADDRESS_FORMAT_COMPRESSED",
                                    "ADDRESS_FORMAT_ETHEREUM",
                                    "ADDRESS_FORMAT_SOLANA",
                                    "ADDRESS_FORMAT_COSMOS",
                                    "ADDRESS_FORMAT_TRON",
                                    "ADDRESS_FORMAT_SUI",
                                    "ADDRESS_FORMAT_APTOS",
                                    "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                    "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                    "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                    "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                    "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                    "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                    "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                    "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                    "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                    "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                    "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                    "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                    "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                    "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                    "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                    "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                    "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                    "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                    "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                    "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                    "ADDRESS_FORMAT_SEI",
                                    "ADDRESS_FORMAT_XLM",
                                    "ADDRESS_FORMAT_DOGE_MAINNET",
                                    "ADDRESS_FORMAT_DOGE_TESTNET",
                                    "ADDRESS_FORMAT_TON_V3R2",
                                    "ADDRESS_FORMAT_TON_V4R2",
                                    "ADDRESS_FORMAT_XRP"
                                  ]
                                }
                              }
                            }
                          },
                          "createPoliciesIntent": {
                            "required": ["policies"],
                            "type": "object",
                            "properties": {
                              "policies": {
                                "type": "array",
                                "description": "An array of policy intents to be created.",
                                "items": {
                                  "required": ["effect", "policyName"],
                                  "type": "object",
                                  "properties": {
                                    "policyName": {
                                      "type": "string",
                                      "description": "Human-readable name for a Policy."
                                    },
                                    "effect": {
                                      "type": "string",
                                      "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
                                    },
                                    "condition": {
                                      "type": "string",
                                      "description": "The condition expression that triggers the Effect"
                                    },
                                    "consensus": {
                                      "type": "string",
                                      "description": "The consensus expression that triggers the Effect"
                                    },
                                    "notes": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "signRawPayloadsIntent": {
                            "required": [
                              "encoding",
                              "hashFunction",
                              "payloads",
                              "signWith"
                            ],
                            "type": "object",
                            "properties": {
                              "signWith": {
                                "type": "string",
                                "description": "A Wallet account address, Private Key address, or Private Key identifier."
                              },
                              "payloads": {
                                "type": "array",
                                "description": "An array of raw unsigned payloads to be signed.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "encoding": {
                                "type": "string",
                                "enum": [
                                  "PAYLOAD_ENCODING_HEXADECIMAL",
                                  "PAYLOAD_ENCODING_TEXT_UTF8"
                                ]
                              },
                              "hashFunction": {
                                "type": "string",
                                "enum": [
                                  "HASH_FUNCTION_NO_OP",
                                  "HASH_FUNCTION_SHA256",
                                  "HASH_FUNCTION_KECCAK256",
                                  "HASH_FUNCTION_NOT_APPLICABLE"
                                ]
                              }
                            }
                          },
                          "createReadOnlySessionIntent": {
                            "type": "object"
                          },
                          "createOauthProvidersIntent": {
                            "required": ["oauthProviders", "userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User to add an Oauth provider to"
                              },
                              "oauthProviders": {
                                "type": "array",
                                "description": "A list of Oauth providers.",
                                "items": {
                                  "required": ["oidcToken", "providerName"],
                                  "type": "object",
                                  "properties": {
                                    "providerName": {
                                      "type": "string",
                                      "description": "Human-readable name to identify a Provider."
                                    },
                                    "oidcToken": {
                                      "type": "string",
                                      "description": "Base64 encoded OIDC token"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "deleteOauthProvidersIntent": {
                            "required": ["providerIds", "userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The ID of the User to remove an Oauth provider from"
                              },
                              "providerIds": {
                                "type": "array",
                                "description": "Unique identifier for a given Provider.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createSubOrganizationIntentV5": {
                            "required": [
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "oauthProviders",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": ["apiKeyName", "publicKey"],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "oauthProviders": {
                                      "type": "array",
                                      "description": "A list of Oauth providers. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "oidcToken",
                                          "providerName"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "providerName": {
                                            "type": "string",
                                            "description": "Human-readable name to identify a Provider."
                                          },
                                          "oidcToken": {
                                            "type": "string",
                                            "description": "Base64 encoded OIDC token"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              },
                              "wallet": {
                                "required": ["accounts", "walletName"],
                                "type": "object",
                                "properties": {
                                  "walletName": {
                                    "type": "string",
                                    "description": "Human-readable name for a Wallet."
                                  },
                                  "accounts": {
                                    "type": "array",
                                    "description": "A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.",
                                    "items": {
                                      "required": [
                                        "addressFormat",
                                        "curve",
                                        "path",
                                        "pathFormat"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "curve": {
                                          "type": "string",
                                          "enum": [
                                            "CURVE_SECP256K1",
                                            "CURVE_ED25519"
                                          ]
                                        },
                                        "pathFormat": {
                                          "type": "string",
                                          "enum": ["PATH_FORMAT_BIP32"]
                                        },
                                        "path": {
                                          "type": "string",
                                          "description": "Path used to generate a wallet Account."
                                        },
                                        "addressFormat": {
                                          "type": "string",
                                          "enum": [
                                            "ADDRESS_FORMAT_UNCOMPRESSED",
                                            "ADDRESS_FORMAT_COMPRESSED",
                                            "ADDRESS_FORMAT_ETHEREUM",
                                            "ADDRESS_FORMAT_SOLANA",
                                            "ADDRESS_FORMAT_COSMOS",
                                            "ADDRESS_FORMAT_TRON",
                                            "ADDRESS_FORMAT_SUI",
                                            "ADDRESS_FORMAT_APTOS",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                            "ADDRESS_FORMAT_SEI",
                                            "ADDRESS_FORMAT_XLM",
                                            "ADDRESS_FORMAT_DOGE_MAINNET",
                                            "ADDRESS_FORMAT_DOGE_TESTNET",
                                            "ADDRESS_FORMAT_TON_V3R2",
                                            "ADDRESS_FORMAT_TON_V4R2",
                                            "ADDRESS_FORMAT_XRP"
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "mnemonicLength": {
                                    "type": "integer",
                                    "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.",
                                    "format": "int32"
                                  }
                                }
                              },
                              "disableEmailRecovery": {
                                "type": "boolean",
                                "description": "Disable email recovery for the sub-organization"
                              },
                              "disableEmailAuth": {
                                "type": "boolean",
                                "description": "Disable email auth for the sub-organization"
                              }
                            }
                          },
                          "oauthIntent": {
                            "required": ["oidcToken", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "oidcToken": {
                                "type": "string",
                                "description": "Base64 encoded OIDC token"
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted."
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              }
                            }
                          },
                          "createApiKeysIntentV2": {
                            "required": ["apiKeys", "userId"],
                            "type": "object",
                            "properties": {
                              "apiKeys": {
                                "type": "array",
                                "description": "A list of API Keys.",
                                "items": {
                                  "required": [
                                    "apiKeyName",
                                    "curveType",
                                    "publicKey"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "apiKeyName": {
                                      "type": "string",
                                      "description": "Human-readable name for an API Key."
                                    },
                                    "publicKey": {
                                      "type": "string",
                                      "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                    },
                                    "curveType": {
                                      "type": "string",
                                      "enum": [
                                        "API_KEY_CURVE_P256",
                                        "API_KEY_CURVE_SECP256K1",
                                        "API_KEY_CURVE_ED25519"
                                      ]
                                    },
                                    "expirationSeconds": {
                                      "type": "string",
                                      "description": "Optional window (in seconds) indicating how long the API Key should last."
                                    }
                                  }
                                }
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              }
                            }
                          },
                          "createReadWriteSessionIntent": {
                            "required": ["email", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted."
                              },
                              "email": {
                                "type": "string",
                                "description": "Email of the user to create a read write session for"
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              }
                            }
                          },
                          "emailAuthIntentV2": {
                            "required": ["email", "targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "description": "Email of the authenticating user."
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted."
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              },
                              "emailCustomization": {
                                "type": "object",
                                "properties": {
                                  "appName": {
                                    "type": "string",
                                    "description": "The name of the application."
                                  },
                                  "logoUrl": {
                                    "type": "string",
                                    "description": "A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px."
                                  },
                                  "magicLinkTemplate": {
                                    "type": "string",
                                    "description": "A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`."
                                  },
                                  "templateVariables": {
                                    "type": "string",
                                    "description": "JSON object containing key/value pairs to be used with custom templates."
                                  },
                                  "templateId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template."
                                  }
                                }
                              },
                              "invalidateExisting": {
                                "type": "boolean",
                                "description": "Invalidate all other previously generated Email Auth API keys"
                              },
                              "sendFromEmailAddress": {
                                "type": "string",
                                "description": "Optional custom email address from which to send the email"
                              }
                            }
                          },
                          "createSubOrganizationIntentV6": {
                            "required": [
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "oauthProviders",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "apiKeyName",
                                          "curveType",
                                          "publicKey"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "curveType": {
                                            "type": "string",
                                            "enum": [
                                              "API_KEY_CURVE_P256",
                                              "API_KEY_CURVE_SECP256K1",
                                              "API_KEY_CURVE_ED25519"
                                            ]
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "oauthProviders": {
                                      "type": "array",
                                      "description": "A list of Oauth providers. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "oidcToken",
                                          "providerName"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "providerName": {
                                            "type": "string",
                                            "description": "Human-readable name to identify a Provider."
                                          },
                                          "oidcToken": {
                                            "type": "string",
                                            "description": "Base64 encoded OIDC token"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              },
                              "wallet": {
                                "required": ["accounts", "walletName"],
                                "type": "object",
                                "properties": {
                                  "walletName": {
                                    "type": "string",
                                    "description": "Human-readable name for a Wallet."
                                  },
                                  "accounts": {
                                    "type": "array",
                                    "description": "A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.",
                                    "items": {
                                      "required": [
                                        "addressFormat",
                                        "curve",
                                        "path",
                                        "pathFormat"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "curve": {
                                          "type": "string",
                                          "enum": [
                                            "CURVE_SECP256K1",
                                            "CURVE_ED25519"
                                          ]
                                        },
                                        "pathFormat": {
                                          "type": "string",
                                          "enum": ["PATH_FORMAT_BIP32"]
                                        },
                                        "path": {
                                          "type": "string",
                                          "description": "Path used to generate a wallet Account."
                                        },
                                        "addressFormat": {
                                          "type": "string",
                                          "enum": [
                                            "ADDRESS_FORMAT_UNCOMPRESSED",
                                            "ADDRESS_FORMAT_COMPRESSED",
                                            "ADDRESS_FORMAT_ETHEREUM",
                                            "ADDRESS_FORMAT_SOLANA",
                                            "ADDRESS_FORMAT_COSMOS",
                                            "ADDRESS_FORMAT_TRON",
                                            "ADDRESS_FORMAT_SUI",
                                            "ADDRESS_FORMAT_APTOS",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                            "ADDRESS_FORMAT_SEI",
                                            "ADDRESS_FORMAT_XLM",
                                            "ADDRESS_FORMAT_DOGE_MAINNET",
                                            "ADDRESS_FORMAT_DOGE_TESTNET",
                                            "ADDRESS_FORMAT_TON_V3R2",
                                            "ADDRESS_FORMAT_TON_V4R2",
                                            "ADDRESS_FORMAT_XRP"
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "mnemonicLength": {
                                    "type": "integer",
                                    "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.",
                                    "format": "int32"
                                  }
                                }
                              },
                              "disableEmailRecovery": {
                                "type": "boolean",
                                "description": "Disable email recovery for the sub-organization"
                              },
                              "disableEmailAuth": {
                                "type": "boolean",
                                "description": "Disable email auth for the sub-organization"
                              }
                            }
                          },
                          "deletePrivateKeysIntent": {
                            "required": ["privateKeyIds"],
                            "type": "object",
                            "properties": {
                              "privateKeyIds": {
                                "type": "array",
                                "description": "List of unique identifiers for private keys within an organization",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "deleteWithoutExport": {
                                "type": "boolean",
                                "description": "Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored."
                              }
                            }
                          },
                          "deleteWalletsIntent": {
                            "required": ["walletIds"],
                            "type": "object",
                            "properties": {
                              "walletIds": {
                                "type": "array",
                                "description": "List of unique identifiers for wallets within an organization",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "deleteWithoutExport": {
                                "type": "boolean",
                                "description": "Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored."
                              }
                            }
                          },
                          "createReadWriteSessionIntentV2": {
                            "required": ["targetPublicKey"],
                            "type": "object",
                            "properties": {
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              }
                            }
                          },
                          "deleteSubOrganizationIntent": {
                            "type": "object",
                            "properties": {
                              "deleteWithoutExport": {
                                "type": "boolean",
                                "description": "Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false."
                              }
                            }
                          },
                          "initOtpAuthIntent": {
                            "required": ["contact", "otpType"],
                            "type": "object",
                            "properties": {
                              "otpType": {
                                "type": "string",
                                "description": "Enum to specifiy whether to send OTP via SMS or email"
                              },
                              "contact": {
                                "type": "string",
                                "description": "Email or phone number to send the OTP code to"
                              },
                              "emailCustomization": {
                                "type": "object",
                                "properties": {
                                  "appName": {
                                    "type": "string",
                                    "description": "The name of the application."
                                  },
                                  "logoUrl": {
                                    "type": "string",
                                    "description": "A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px."
                                  },
                                  "magicLinkTemplate": {
                                    "type": "string",
                                    "description": "A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`."
                                  },
                                  "templateVariables": {
                                    "type": "string",
                                    "description": "JSON object containing key/value pairs to be used with custom templates."
                                  },
                                  "templateId": {
                                    "type": "string",
                                    "description": "Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template."
                                  }
                                }
                              },
                              "smsCustomization": {
                                "type": "object",
                                "properties": {
                                  "template": {
                                    "type": "string",
                                    "description": "Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}}"
                                  }
                                }
                              },
                              "userIdentifier": {
                                "type": "string",
                                "description": "Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address."
                              },
                              "sendFromEmailAddress": {
                                "type": "string",
                                "description": "Optional custom email address from which to send the OTP email"
                              }
                            }
                          },
                          "otpAuthIntent": {
                            "required": ["otpCode", "otpId"],
                            "type": "object",
                            "properties": {
                              "otpId": {
                                "type": "string",
                                "description": "ID representing the result of an init OTP activity."
                              },
                              "otpCode": {
                                "type": "string",
                                "description": "6 digit OTP code sent out to a user's contact (email or SMS)"
                              },
                              "targetPublicKey": {
                                "type": "string",
                                "description": "Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted."
                              },
                              "apiKeyName": {
                                "type": "string",
                                "description": "Optional human-readable name for an API Key. If none provided, default to OTP Auth - <Timestamp>"
                              },
                              "expirationSeconds": {
                                "type": "string",
                                "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
                              },
                              "invalidateExisting": {
                                "type": "boolean",
                                "description": "Invalidate all other previously generated OTP Auth API keys"
                              }
                            }
                          },
                          "createSubOrganizationIntentV7": {
                            "required": [
                              "rootQuorumThreshold",
                              "rootUsers",
                              "subOrganizationName"
                            ],
                            "type": "object",
                            "properties": {
                              "subOrganizationName": {
                                "type": "string",
                                "description": "Name for this sub-organization"
                              },
                              "rootUsers": {
                                "type": "array",
                                "description": "Root users to create within this sub-organization",
                                "items": {
                                  "required": [
                                    "apiKeys",
                                    "authenticators",
                                    "oauthProviders",
                                    "userName"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "userName": {
                                      "type": "string",
                                      "description": "Human-readable name for a User."
                                    },
                                    "userEmail": {
                                      "type": "string",
                                      "description": "The user's email address."
                                    },
                                    "userPhoneNumber": {
                                      "type": "string",
                                      "description": "The user's phone number in E.164 format e.g. +13214567890"
                                    },
                                    "apiKeys": {
                                      "type": "array",
                                      "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "apiKeyName",
                                          "curveType",
                                          "publicKey"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "apiKeyName": {
                                            "type": "string",
                                            "description": "Human-readable name for an API Key."
                                          },
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "curveType": {
                                            "type": "string",
                                            "enum": [
                                              "API_KEY_CURVE_P256",
                                              "API_KEY_CURVE_SECP256K1",
                                              "API_KEY_CURVE_ED25519"
                                            ]
                                          },
                                          "expirationSeconds": {
                                            "type": "string",
                                            "description": "Optional window (in seconds) indicating how long the API Key should last."
                                          }
                                        }
                                      }
                                    },
                                    "authenticators": {
                                      "type": "array",
                                      "description": "A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "attestation",
                                          "authenticatorName",
                                          "challenge"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "authenticatorName": {
                                            "type": "string",
                                            "description": "Human-readable name for an Authenticator."
                                          },
                                          "challenge": {
                                            "type": "string",
                                            "description": "Challenge presented for authentication purposes."
                                          },
                                          "attestation": {
                                            "required": [
                                              "attestationObject",
                                              "clientDataJson",
                                              "credentialId",
                                              "transports"
                                            ],
                                            "type": "object",
                                            "properties": {
                                              "credentialId": {
                                                "type": "string",
                                                "description": "The cbor encoded then base64 url encoded id of the credential."
                                              },
                                              "clientDataJson": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
                                              },
                                              "attestationObject": {
                                                "type": "string",
                                                "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
                                              },
                                              "transports": {
                                                "type": "array",
                                                "description": "The type of authenticator transports.",
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AUTHENTICATOR_TRANSPORT_BLE",
                                                    "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                                    "AUTHENTICATOR_TRANSPORT_NFC",
                                                    "AUTHENTICATOR_TRANSPORT_USB",
                                                    "AUTHENTICATOR_TRANSPORT_HYBRID"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "oauthProviders": {
                                      "type": "array",
                                      "description": "A list of Oauth providers. This field, if not needed, should be an empty array in your request body.",
                                      "items": {
                                        "required": [
                                          "oidcToken",
                                          "providerName"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "providerName": {
                                            "type": "string",
                                            "description": "Human-readable name to identify a Provider."
                                          },
                                          "oidcToken": {
                                            "type": "string",
                                            "description": "Base64 encoded OIDC token"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootQuorumThreshold": {
                                "type": "integer",
                                "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users",
                                "format": "int32"
                              },
                              "wallet": {
                                "required": ["accounts", "walletName"],
                                "type": "object",
                                "properties": {
                                  "walletName": {
                                    "type": "string",
                                    "description": "Human-readable name for a Wallet."
                                  },
                                  "accounts": {
                                    "type": "array",
                                    "description": "A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.",
                                    "items": {
                                      "required": [
                                        "addressFormat",
                                        "curve",
                                        "path",
                                        "pathFormat"
                                      ],
                                      "type": "object",
                                      "properties": {
                                        "curve": {
                                          "type": "string",
                                          "enum": [
                                            "CURVE_SECP256K1",
                                            "CURVE_ED25519"
                                          ]
                                        },
                                        "pathFormat": {
                                          "type": "string",
                                          "enum": ["PATH_FORMAT_BIP32"]
                                        },
                                        "path": {
                                          "type": "string",
                                          "description": "Path used to generate a wallet Account."
                                        },
                                        "addressFormat": {
                                          "type": "string",
                                          "enum": [
                                            "ADDRESS_FORMAT_UNCOMPRESSED",
                                            "ADDRESS_FORMAT_COMPRESSED",
                                            "ADDRESS_FORMAT_ETHEREUM",
                                            "ADDRESS_FORMAT_SOLANA",
                                            "ADDRESS_FORMAT_COSMOS",
                                            "ADDRESS_FORMAT_TRON",
                                            "ADDRESS_FORMAT_SUI",
                                            "ADDRESS_FORMAT_APTOS",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                            "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                            "ADDRESS_FORMAT_SEI",
                                            "ADDRESS_FORMAT_XLM",
                                            "ADDRESS_FORMAT_DOGE_MAINNET",
                                            "ADDRESS_FORMAT_DOGE_TESTNET",
                                            "ADDRESS_FORMAT_TON_V3R2",
                                            "ADDRESS_FORMAT_TON_V4R2",
                                            "ADDRESS_FORMAT_XRP"
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "mnemonicLength": {
                                    "type": "integer",
                                    "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.",
                                    "format": "int32"
                                  }
                                }
                              },
                              "disableEmailRecovery": {
                                "type": "boolean",
                                "description": "Disable email recovery for the sub-organization"
                              },
                              "disableEmailAuth": {
                                "type": "boolean",
                                "description": "Disable email auth for the sub-organization"
                              },
                              "disableSmsAuth": {
                                "type": "boolean",
                                "description": "Disable OTP SMS auth for the sub-organization"
                              },
                              "disableOtpEmailAuth": {
                                "type": "boolean",
                                "description": "Disable OTP email auth for the sub-organization"
                              }
                            }
                          },
                          "updateWalletIntent": {
                            "required": ["walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a given Wallet."
                              },
                              "walletName": {
                                "type": "string",
                                "description": "Human-readable name for a Wallet."
                              }
                            }
                          }
                        }
                      },
                      "result": {
                        "type": "object",
                        "properties": {
                          "createOrganizationResult": {
                            "required": ["organizationId"],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization."
                              }
                            }
                          },
                          "createAuthenticatorsResult": {
                            "required": ["authenticatorIds"],
                            "type": "object",
                            "properties": {
                              "authenticatorIds": {
                                "type": "array",
                                "description": "A list of Authenticator IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createUsersResult": {
                            "required": ["userIds"],
                            "type": "object",
                            "properties": {
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createPrivateKeysResult": {
                            "required": ["privateKeyIds"],
                            "type": "object",
                            "properties": {
                              "privateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createInvitationsResult": {
                            "required": ["invitationIds"],
                            "type": "object",
                            "properties": {
                              "invitationIds": {
                                "type": "array",
                                "description": "A list of Invitation IDs",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "acceptInvitationResult": {
                            "required": ["invitationId", "userId"],
                            "type": "object",
                            "properties": {
                              "invitationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Invitation."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              }
                            }
                          },
                          "signRawPayloadResult": {
                            "required": ["r", "s", "v"],
                            "type": "object",
                            "properties": {
                              "r": {
                                "type": "string",
                                "description": "Component of an ECSDA signature."
                              },
                              "s": {
                                "type": "string",
                                "description": "Component of an ECSDA signature."
                              },
                              "v": {
                                "type": "string",
                                "description": "Component of an ECSDA signature."
                              }
                            }
                          },
                          "createPolicyResult": {
                            "required": ["policyId"],
                            "type": "object",
                            "properties": {
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Policy."
                              }
                            }
                          },
                          "disablePrivateKeyResult": {
                            "required": ["privateKeyId"],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              }
                            }
                          },
                          "deleteUsersResult": {
                            "required": ["userIds"],
                            "type": "object",
                            "properties": {
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteAuthenticatorsResult": {
                            "required": ["authenticatorIds"],
                            "type": "object",
                            "properties": {
                              "authenticatorIds": {
                                "type": "array",
                                "description": "Unique identifier for a given Authenticator.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteInvitationResult": {
                            "required": ["invitationId"],
                            "type": "object",
                            "properties": {
                              "invitationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Invitation."
                              }
                            }
                          },
                          "deleteOrganizationResult": {
                            "required": ["organizationId"],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization."
                              }
                            }
                          },
                          "deletePolicyResult": {
                            "required": ["policyId"],
                            "type": "object",
                            "properties": {
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Policy."
                              }
                            }
                          },
                          "createUserTagResult": {
                            "required": ["userIds", "userTagId"],
                            "type": "object",
                            "properties": {
                              "userTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given User Tag."
                              },
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteUserTagsResult": {
                            "required": ["userIds", "userTagIds"],
                            "type": "object",
                            "properties": {
                              "userTagIds": {
                                "type": "array",
                                "description": "A list of User Tag IDs.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "userIds": {
                                "type": "array",
                                "description": "A list of User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "signTransactionResult": {
                            "required": ["signedTransaction"],
                            "type": "object",
                            "properties": {
                              "signedTransaction": {
                                "type": "string"
                              }
                            }
                          },
                          "deleteApiKeysResult": {
                            "required": ["apiKeyIds"],
                            "type": "object",
                            "properties": {
                              "apiKeyIds": {
                                "type": "array",
                                "description": "A list of API Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createApiKeysResult": {
                            "required": ["apiKeyIds"],
                            "type": "object",
                            "properties": {
                              "apiKeyIds": {
                                "type": "array",
                                "description": "A list of API Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createPrivateKeyTagResult": {
                            "required": ["privateKeyIds", "privateKeyTagId"],
                            "type": "object",
                            "properties": {
                              "privateKeyTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key Tag."
                              },
                              "privateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deletePrivateKeyTagsResult": {
                            "required": ["privateKeyIds", "privateKeyTagIds"],
                            "type": "object",
                            "properties": {
                              "privateKeyTagIds": {
                                "type": "array",
                                "description": "A list of Private Key Tag IDs.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "privateKeyIds": {
                                "type": "array",
                                "description": "A list of Private Key IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "setPaymentMethodResult": {
                            "required": [
                              "cardHolderEmail",
                              "cardHolderName",
                              "lastFour"
                            ],
                            "type": "object",
                            "properties": {
                              "lastFour": {
                                "type": "string",
                                "description": "The last four digits of the credit card added."
                              },
                              "cardHolderName": {
                                "type": "string",
                                "description": "The name associated with the payment method."
                              },
                              "cardHolderEmail": {
                                "type": "string",
                                "description": "The email address associated with the payment method."
                              }
                            }
                          },
                          "activateBillingTierResult": {
                            "required": ["productId"],
                            "type": "object",
                            "properties": {
                              "productId": {
                                "type": "string",
                                "description": "The id of the product being subscribed to."
                              }
                            }
                          },
                          "deletePaymentMethodResult": {
                            "required": ["paymentMethodId"],
                            "type": "object",
                            "properties": {
                              "paymentMethodId": {
                                "type": "string",
                                "description": "The payment method that was removed."
                              }
                            }
                          },
                          "createApiOnlyUsersResult": {
                            "required": ["userIds"],
                            "type": "object",
                            "properties": {
                              "userIds": {
                                "type": "array",
                                "description": "A list of API-only User IDs.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "updateRootQuorumResult": {
                            "type": "object"
                          },
                          "updateUserTagResult": {
                            "required": ["userTagId"],
                            "type": "object",
                            "properties": {
                              "userTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given User Tag."
                              }
                            }
                          },
                          "updatePrivateKeyTagResult": {
                            "required": ["privateKeyTagId"],
                            "type": "object",
                            "properties": {
                              "privateKeyTagId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key Tag."
                              }
                            }
                          },
                          "createSubOrganizationResult": {
                            "required": ["subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "updateAllowedOriginsResult": {
                            "type": "object"
                          },
                          "createPrivateKeysResultV2": {
                            "required": ["privateKeys"],
                            "type": "object",
                            "properties": {
                              "privateKeys": {
                                "type": "array",
                                "description": "A list of Private Key IDs and addresses.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "privateKeyId": {
                                      "type": "string"
                                    },
                                    "addresses": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "format": {
                                            "type": "string",
                                            "enum": [
                                              "ADDRESS_FORMAT_UNCOMPRESSED",
                                              "ADDRESS_FORMAT_COMPRESSED",
                                              "ADDRESS_FORMAT_ETHEREUM",
                                              "ADDRESS_FORMAT_SOLANA",
                                              "ADDRESS_FORMAT_COSMOS",
                                              "ADDRESS_FORMAT_TRON",
                                              "ADDRESS_FORMAT_SUI",
                                              "ADDRESS_FORMAT_APTOS",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                              "ADDRESS_FORMAT_SEI",
                                              "ADDRESS_FORMAT_XLM",
                                              "ADDRESS_FORMAT_DOGE_MAINNET",
                                              "ADDRESS_FORMAT_DOGE_TESTNET",
                                              "ADDRESS_FORMAT_TON_V3R2",
                                              "ADDRESS_FORMAT_TON_V4R2",
                                              "ADDRESS_FORMAT_XRP"
                                            ]
                                          },
                                          "address": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "updateUserResult": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "A User ID."
                              }
                            }
                          },
                          "updatePolicyResult": {
                            "required": ["policyId"],
                            "type": "object",
                            "properties": {
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Policy."
                              }
                            }
                          },
                          "createSubOrganizationResultV3": {
                            "required": ["privateKeys", "subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "privateKeys": {
                                "type": "array",
                                "description": "A list of Private Key IDs and addresses.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "privateKeyId": {
                                      "type": "string"
                                    },
                                    "addresses": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "format": {
                                            "type": "string",
                                            "enum": [
                                              "ADDRESS_FORMAT_UNCOMPRESSED",
                                              "ADDRESS_FORMAT_COMPRESSED",
                                              "ADDRESS_FORMAT_ETHEREUM",
                                              "ADDRESS_FORMAT_SOLANA",
                                              "ADDRESS_FORMAT_COSMOS",
                                              "ADDRESS_FORMAT_TRON",
                                              "ADDRESS_FORMAT_SUI",
                                              "ADDRESS_FORMAT_APTOS",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                              "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                              "ADDRESS_FORMAT_SEI",
                                              "ADDRESS_FORMAT_XLM",
                                              "ADDRESS_FORMAT_DOGE_MAINNET",
                                              "ADDRESS_FORMAT_DOGE_TESTNET",
                                              "ADDRESS_FORMAT_TON_V3R2",
                                              "ADDRESS_FORMAT_TON_V4R2",
                                              "ADDRESS_FORMAT_XRP"
                                            ]
                                          },
                                          "address": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createWalletResult": {
                            "required": ["addresses", "walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a Wallet."
                              },
                              "addresses": {
                                "type": "array",
                                "description": "A list of account addresses.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createWalletAccountsResult": {
                            "required": ["addresses"],
                            "type": "object",
                            "properties": {
                              "addresses": {
                                "type": "array",
                                "description": "A list of derived addresses.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "initUserEmailRecoveryResult": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for the user being recovered."
                              }
                            }
                          },
                          "recoverUserResult": {
                            "required": ["authenticatorId"],
                            "type": "object",
                            "properties": {
                              "authenticatorId": {
                                "type": "array",
                                "description": "ID of the authenticator created.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "setOrganizationFeatureResult": {
                            "required": ["features"],
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "array",
                                "description": "Resulting list of organization features.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "enum": [
                                        "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY",
                                        "FEATURE_NAME_WEBAUTHN_ORIGINS",
                                        "FEATURE_NAME_EMAIL_AUTH",
                                        "FEATURE_NAME_EMAIL_RECOVERY",
                                        "FEATURE_NAME_WEBHOOK",
                                        "FEATURE_NAME_SMS_AUTH",
                                        "FEATURE_NAME_OTP_EMAIL_AUTH"
                                      ]
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "removeOrganizationFeatureResult": {
                            "required": ["features"],
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "array",
                                "description": "Resulting list of organization features.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "enum": [
                                        "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY",
                                        "FEATURE_NAME_WEBAUTHN_ORIGINS",
                                        "FEATURE_NAME_EMAIL_AUTH",
                                        "FEATURE_NAME_EMAIL_RECOVERY",
                                        "FEATURE_NAME_WEBHOOK",
                                        "FEATURE_NAME_SMS_AUTH",
                                        "FEATURE_NAME_OTP_EMAIL_AUTH"
                                      ]
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "exportPrivateKeyResult": {
                            "required": ["exportBundle", "privateKeyId"],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a given Private Key."
                              },
                              "exportBundle": {
                                "type": "string",
                                "description": "Export bundle containing a private key encrypted to the client's target public key."
                              }
                            }
                          },
                          "exportWalletResult": {
                            "required": ["exportBundle", "walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a given Wallet."
                              },
                              "exportBundle": {
                                "type": "string",
                                "description": "Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key."
                              }
                            }
                          },
                          "createSubOrganizationResultV4": {
                            "required": ["subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "wallet": {
                                "required": ["addresses", "walletId"],
                                "type": "object",
                                "properties": {
                                  "walletId": {
                                    "type": "string"
                                  },
                                  "addresses": {
                                    "type": "array",
                                    "description": "A list of account addresses.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "emailAuthResult": {
                            "required": ["apiKeyId", "userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for the authenticating User."
                              },
                              "apiKeyId": {
                                "type": "string",
                                "description": "Unique identifier for the created API key."
                              }
                            }
                          },
                          "exportWalletAccountResult": {
                            "required": ["address", "exportBundle"],
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "description": "Address to identify Wallet Account."
                              },
                              "exportBundle": {
                                "type": "string",
                                "description": "Export bundle containing a private key encrypted by the client's target public key."
                              }
                            }
                          },
                          "initImportWalletResult": {
                            "required": ["importBundle"],
                            "type": "object",
                            "properties": {
                              "importBundle": {
                                "type": "string",
                                "description": "Import bundle containing a public key and signature to use for importing client data."
                              }
                            }
                          },
                          "importWalletResult": {
                            "required": ["addresses", "walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "Unique identifier for a Wallet."
                              },
                              "addresses": {
                                "type": "array",
                                "description": "A list of account addresses.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "initImportPrivateKeyResult": {
                            "required": ["importBundle"],
                            "type": "object",
                            "properties": {
                              "importBundle": {
                                "type": "string",
                                "description": "Import bundle containing a public key and signature to use for importing client data."
                              }
                            }
                          },
                          "importPrivateKeyResult": {
                            "required": ["addresses", "privateKeyId"],
                            "type": "object",
                            "properties": {
                              "privateKeyId": {
                                "type": "string",
                                "description": "Unique identifier for a Private Key."
                              },
                              "addresses": {
                                "type": "array",
                                "description": "A list of addresses.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "format": {
                                      "type": "string",
                                      "enum": [
                                        "ADDRESS_FORMAT_UNCOMPRESSED",
                                        "ADDRESS_FORMAT_COMPRESSED",
                                        "ADDRESS_FORMAT_ETHEREUM",
                                        "ADDRESS_FORMAT_SOLANA",
                                        "ADDRESS_FORMAT_COSMOS",
                                        "ADDRESS_FORMAT_TRON",
                                        "ADDRESS_FORMAT_SUI",
                                        "ADDRESS_FORMAT_APTOS",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
                                        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
                                        "ADDRESS_FORMAT_SEI",
                                        "ADDRESS_FORMAT_XLM",
                                        "ADDRESS_FORMAT_DOGE_MAINNET",
                                        "ADDRESS_FORMAT_DOGE_TESTNET",
                                        "ADDRESS_FORMAT_TON_V3R2",
                                        "ADDRESS_FORMAT_TON_V4R2",
                                        "ADDRESS_FORMAT_XRP"
                                      ]
                                    },
                                    "address": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createPoliciesResult": {
                            "required": ["policyIds"],
                            "type": "object",
                            "properties": {
                              "policyIds": {
                                "type": "array",
                                "description": "A list of unique identifiers for the created policies.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "signRawPayloadsResult": {
                            "type": "object",
                            "properties": {
                              "signatures": {
                                "type": "array",
                                "items": {
                                  "required": ["r", "s", "v"],
                                  "type": "object",
                                  "properties": {
                                    "r": {
                                      "type": "string",
                                      "description": "Component of an ECSDA signature."
                                    },
                                    "s": {
                                      "type": "string",
                                      "description": "Component of an ECSDA signature."
                                    },
                                    "v": {
                                      "type": "string",
                                      "description": "Component of an ECSDA signature."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "createReadOnlySessionResult": {
                            "required": [
                              "organizationId",
                              "organizationName",
                              "session",
                              "sessionExpiry",
                              "userId",
                              "username"
                            ],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
                              },
                              "organizationName": {
                                "type": "string",
                                "description": "Human-readable name for an Organization."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "username": {
                                "type": "string",
                                "description": "Human-readable name for a User."
                              },
                              "session": {
                                "type": "string",
                                "description": "String representing a read only session"
                              },
                              "sessionExpiry": {
                                "type": "string",
                                "description": "UTC timestamp in seconds representing the expiry time for the read only session.",
                                "format": "uint64"
                              }
                            }
                          },
                          "createOauthProvidersResult": {
                            "required": ["providerIds"],
                            "type": "object",
                            "properties": {
                              "providerIds": {
                                "type": "array",
                                "description": "A list of unique identifiers for Oauth Providers",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteOauthProvidersResult": {
                            "required": ["providerIds"],
                            "type": "object",
                            "properties": {
                              "providerIds": {
                                "type": "array",
                                "description": "A list of unique identifiers for Oauth Providers",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createSubOrganizationResultV5": {
                            "required": ["subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "wallet": {
                                "required": ["addresses", "walletId"],
                                "type": "object",
                                "properties": {
                                  "walletId": {
                                    "type": "string"
                                  },
                                  "addresses": {
                                    "type": "array",
                                    "description": "A list of account addresses.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "oauthResult": {
                            "required": [
                              "apiKeyId",
                              "credentialBundle",
                              "userId"
                            ],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for the authenticating User."
                              },
                              "apiKeyId": {
                                "type": "string",
                                "description": "Unique identifier for the created API key."
                              },
                              "credentialBundle": {
                                "type": "string",
                                "description": "HPKE encrypted credential bundle"
                              }
                            }
                          },
                          "createReadWriteSessionResult": {
                            "required": [
                              "apiKeyId",
                              "credentialBundle",
                              "organizationId",
                              "organizationName",
                              "userId",
                              "username"
                            ],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
                              },
                              "organizationName": {
                                "type": "string",
                                "description": "Human-readable name for an Organization."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "username": {
                                "type": "string",
                                "description": "Human-readable name for a User."
                              },
                              "apiKeyId": {
                                "type": "string",
                                "description": "Unique identifier for the created API key."
                              },
                              "credentialBundle": {
                                "type": "string",
                                "description": "HPKE encrypted credential bundle"
                              }
                            }
                          },
                          "createSubOrganizationResultV6": {
                            "required": ["subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "wallet": {
                                "required": ["addresses", "walletId"],
                                "type": "object",
                                "properties": {
                                  "walletId": {
                                    "type": "string"
                                  },
                                  "addresses": {
                                    "type": "array",
                                    "description": "A list of account addresses.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deletePrivateKeysResult": {
                            "required": ["privateKeyIds"],
                            "type": "object",
                            "properties": {
                              "privateKeyIds": {
                                "type": "array",
                                "description": "A list of private key unique identifiers that were removed",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "deleteWalletsResult": {
                            "required": ["walletIds"],
                            "type": "object",
                            "properties": {
                              "walletIds": {
                                "type": "array",
                                "description": "A list of wallet unique identifiers that were removed",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "createReadWriteSessionResultV2": {
                            "required": [
                              "apiKeyId",
                              "credentialBundle",
                              "organizationId",
                              "organizationName",
                              "userId",
                              "username"
                            ],
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
                              },
                              "organizationName": {
                                "type": "string",
                                "description": "Human-readable name for an Organization."
                              },
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for a given User."
                              },
                              "username": {
                                "type": "string",
                                "description": "Human-readable name for a User."
                              },
                              "apiKeyId": {
                                "type": "string",
                                "description": "Unique identifier for the created API key."
                              },
                              "credentialBundle": {
                                "type": "string",
                                "description": "HPKE encrypted credential bundle"
                              }
                            }
                          },
                          "deleteSubOrganizationResult": {
                            "required": ["subOrganizationUuid"],
                            "type": "object",
                            "properties": {
                              "subOrganizationUuid": {
                                "type": "string",
                                "description": "Unique identifier of the sub organization that was removed"
                              }
                            }
                          },
                          "initOtpAuthResult": {
                            "required": ["otpId"],
                            "type": "object",
                            "properties": {
                              "otpId": {
                                "type": "string",
                                "description": "Unique identifier for an OTP authentication"
                              }
                            }
                          },
                          "otpAuthResult": {
                            "required": ["userId"],
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "Unique identifier for the authenticating User."
                              },
                              "apiKeyId": {
                                "type": "string",
                                "description": "Unique identifier for the created API key."
                              },
                              "credentialBundle": {
                                "type": "string",
                                "description": "HPKE encrypted credential bundle"
                              }
                            }
                          },
                          "createSubOrganizationResultV7": {
                            "required": ["subOrganizationId"],
                            "type": "object",
                            "properties": {
                              "subOrganizationId": {
                                "type": "string"
                              },
                              "wallet": {
                                "required": ["addresses", "walletId"],
                                "type": "object",
                                "properties": {
                                  "walletId": {
                                    "type": "string"
                                  },
                                  "addresses": {
                                    "type": "array",
                                    "description": "A list of account addresses.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "rootUserIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "updateWalletResult": {
                            "required": ["walletId"],
                            "type": "object",
                            "properties": {
                              "walletId": {
                                "type": "string",
                                "description": "A Wallet ID."
                              }
                            }
                          }
                        }
                      },
                      "votes": {
                        "type": "array",
                        "description": "A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.",
                        "items": {
                          "required": [
                            "activityId",
                            "createdAt",
                            "id",
                            "message",
                            "publicKey",
                            "scheme",
                            "selection",
                            "signature",
                            "user",
                            "userId"
                          ],
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for a given Vote object."
                            },
                            "userId": {
                              "type": "string",
                              "description": "Unique identifier for a given User."
                            },
                            "user": {
                              "required": [
                                "apiKeys",
                                "authenticators",
                                "createdAt",
                                "oauthProviders",
                                "updatedAt",
                                "userId",
                                "userName",
                                "userTags"
                              ],
                              "type": "object",
                              "properties": {
                                "userId": {
                                  "type": "string",
                                  "description": "Unique identifier for a given User."
                                },
                                "userName": {
                                  "type": "string",
                                  "description": "Human-readable name for a User."
                                },
                                "userEmail": {
                                  "type": "string",
                                  "description": "The user's email address."
                                },
                                "userPhoneNumber": {
                                  "type": "string",
                                  "description": "The user's phone number in E.164 format e.g. +13214567890"
                                },
                                "authenticators": {
                                  "type": "array",
                                  "description": "A list of Authenticator parameters.",
                                  "items": {
                                    "required": [
                                      "aaguid",
                                      "attestationType",
                                      "authenticatorId",
                                      "authenticatorName",
                                      "createdAt",
                                      "credential",
                                      "credentialId",
                                      "model",
                                      "transports",
                                      "updatedAt"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "transports": {
                                        "type": "array",
                                        "description": "Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "AUTHENTICATOR_TRANSPORT_BLE",
                                            "AUTHENTICATOR_TRANSPORT_INTERNAL",
                                            "AUTHENTICATOR_TRANSPORT_NFC",
                                            "AUTHENTICATOR_TRANSPORT_USB",
                                            "AUTHENTICATOR_TRANSPORT_HYBRID"
                                          ]
                                        }
                                      },
                                      "attestationType": {
                                        "type": "string"
                                      },
                                      "aaguid": {
                                        "type": "string",
                                        "description": "Identifier indicating the type of the Security Key."
                                      },
                                      "credentialId": {
                                        "type": "string",
                                        "description": "Unique identifier for a WebAuthn credential."
                                      },
                                      "model": {
                                        "type": "string",
                                        "description": "The type of Authenticator device."
                                      },
                                      "credential": {
                                        "required": ["publicKey", "type"],
                                        "type": "object",
                                        "properties": {
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR",
                                              "CREDENTIAL_TYPE_API_KEY_P256",
                                              "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256",
                                              "CREDENTIAL_TYPE_API_KEY_SECP256K1",
                                              "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256",
                                              "CREDENTIAL_TYPE_API_KEY_ED25519",
                                              "CREDENTIAL_TYPE_OTP_AUTH_KEY_P256"
                                            ]
                                          }
                                        }
                                      },
                                      "authenticatorId": {
                                        "type": "string",
                                        "description": "Unique identifier for a given Authenticator."
                                      },
                                      "authenticatorName": {
                                        "type": "string",
                                        "description": "Human-readable name for an Authenticator."
                                      },
                                      "createdAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "updatedAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "apiKeys": {
                                  "type": "array",
                                  "description": "A list of API Key parameters. This field, if not needed, should be an empty array in your request body.",
                                  "items": {
                                    "required": [
                                      "apiKeyId",
                                      "apiKeyName",
                                      "createdAt",
                                      "credential",
                                      "updatedAt"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "credential": {
                                        "required": ["publicKey", "type"],
                                        "type": "object",
                                        "properties": {
                                          "publicKey": {
                                            "type": "string",
                                            "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                                          },
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR",
                                              "CREDENTIAL_TYPE_API_KEY_P256",
                                              "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256",
                                              "CREDENTIAL_TYPE_API_KEY_SECP256K1",
                                              "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256",
                                              "CREDENTIAL_TYPE_API_KEY_ED25519",
                                              "CREDENTIAL_TYPE_OTP_AUTH_KEY_P256"
                                            ]
                                          }
                                        }
                                      },
                                      "apiKeyId": {
                                        "type": "string",
                                        "description": "Unique identifier for a given API Key."
                                      },
                                      "apiKeyName": {
                                        "type": "string",
                                        "description": "Human-readable name for an API Key."
                                      },
                                      "createdAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "updatedAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "expirationSeconds": {
                                        "type": "string",
                                        "description": "Optional window (in seconds) indicating how long the API Key should last.",
                                        "format": "uint64"
                                      }
                                    }
                                  }
                                },
                                "userTags": {
                                  "type": "array",
                                  "description": "A list of User Tag IDs.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "oauthProviders": {
                                  "type": "array",
                                  "description": "A list of Oauth Providers.",
                                  "items": {
                                    "required": [
                                      "audience",
                                      "createdAt",
                                      "issuer",
                                      "providerId",
                                      "providerName",
                                      "subject",
                                      "updatedAt"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "providerId": {
                                        "type": "string",
                                        "description": "Unique identifier for an OAuth Provider"
                                      },
                                      "providerName": {
                                        "type": "string",
                                        "description": "Human-readable name to identify a Provider."
                                      },
                                      "issuer": {
                                        "type": "string",
                                        "description": "The issuer of the token, typically a URL indicating the authentication server, e.g https://accounts.google.com"
                                      },
                                      "audience": {
                                        "type": "string",
                                        "description": "Expected audience ('aud' attribute of the signed token) which represents the app ID"
                                      },
                                      "subject": {
                                        "type": "string",
                                        "description": "Expected subject ('sub' attribute of the signed token) which represents the user ID"
                                      },
                                      "createdAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "updatedAt": {
                                        "required": ["nanos", "seconds"],
                                        "type": "object",
                                        "properties": {
                                          "seconds": {
                                            "type": "string"
                                          },
                                          "nanos": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "createdAt": {
                                  "required": ["nanos", "seconds"],
                                  "type": "object",
                                  "properties": {
                                    "seconds": {
                                      "type": "string"
                                    },
                                    "nanos": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "updatedAt": {
                                  "required": ["nanos", "seconds"],
                                  "type": "object",
                                  "properties": {
                                    "seconds": {
                                      "type": "string"
                                    },
                                    "nanos": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "activityId": {
                              "type": "string",
                              "description": "Unique identifier for a given Activity object."
                            },
                            "selection": {
                              "type": "string",
                              "enum": [
                                "VOTE_SELECTION_APPROVED",
                                "VOTE_SELECTION_REJECTED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "description": "The raw message being signed within a Vote."
                            },
                            "publicKey": {
                              "type": "string",
                              "description": "The public component of a cryptographic key pair used to sign messages and transactions."
                            },
                            "signature": {
                              "type": "string",
                              "description": "The signature applied to a particular vote."
                            },
                            "scheme": {
                              "type": "string",
                              "description": "Method used to produce a signature."
                            },
                            "createdAt": {
                              "required": ["nanos", "seconds"],
                              "type": "object",
                              "properties": {
                                "seconds": {
                                  "type": "string"
                                },
                                "nanos": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "An artifact verifying a User's action."
                      },
                      "canApprove": {
                        "type": "boolean"
                      },
                      "canReject": {
                        "type": "boolean"
                      },
                      "createdAt": {
                        "required": ["nanos", "seconds"],
                        "type": "object",
                        "properties": {
                          "seconds": {
                            "type": "string"
                          },
                          "nanos": {
                            "type": "string"
                          }
                        }
                      },
                      "updatedAt": {
                        "required": ["nanos", "seconds"],
                        "type": "object",
                        "properties": {
                          "seconds": {
                            "type": "string"
                          },
                          "nanos": {
                            "type": "string"
                          }
                        }
                      },
                      "failure": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "message": {
                            "type": "string"
                          },
                          "details": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@type": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-codegen-request-body-name": "body"
    }
  }
}
